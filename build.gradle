import java.nio.file.Files

buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}
plugins {
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

group = 'com.matyrobbrt.igde' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceSets {
    api {}
}

configurations {
    apiImplementation.extendsFrom(minecraft)
}

mixin {
    add sourceSets.main, "igde.refmap.json"
    config "igde.mixins.json"

    debug.verbose = true
    debug.export = true
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: '2022.06.05-1.18.2'

    runs {
        all {
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.enabledGameTestNamespaces', mod_id
            property 'forge.logging.console.level', 'debug'

            arg "-mixin.config=igde.mixins.json"
            mods {
                igde {
                    source sourceSets.api
                    source sourceSets.main
                }
            }
        }

        client {
            workingDirectory project.file('run')
        }

        server {
            workingDirectory project.file('run')
        }

        gameTestServer {
            workingDirectory project.file('run')
        }

        data {
            workingDirectory project.file('run')
            args '--mod', 'igde', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name 'prog'
        url 'https://dvs1.progwml6.com/files/maven'
        content {
            includeGroup 'mezz.jei'
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.2-40.1.19'

    implementation sourceSets.api.output

    // compileOnly fg.deobf("mezz.jei:jei-1.18.2:9.7.0.195:api")
    implementation fg.deobf("mezz.jei:jei-1.18.2:9.7.0.195") // We also need to mixin into the screen helper

    compileOnly group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
    annotationProcessor group:'com.google.auto.service', name:'auto-service', version:'1.0.1'

    if (System.getProperty("idea.sync.active") != "true")
        annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
}

jar {
    from sourceSets.api.output
    manifest {
        attributes([
                "Specification-Title"     : "Matyrobbrt",
                "Specification-Vendor"    : "Matyrobbrt",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "Matyrobbrt",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

processResources {
    doLast {
        final var out = getOutputs().files.iterator().next().toPath()
        final var modsToml = out.resolve('META-INF/mods.toml')
        final var content = Files.readString(modsToml)
        Files.delete(modsToml)
        Files.writeString(modsToml, content.replace('1.0-version', project.version.toString()))
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
